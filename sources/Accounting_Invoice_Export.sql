declare 
	v_count NUMBER;
	v_stat VARCHAR2(32767);
	v_Schema VARCHAR2(50) := 'PLAYGROUND';
begin
	SELECT COUNT(*) INTO v_count
	FROM USER_OBJECTS WHERE OBJECT_NAME = 'V_DOCUMENT_SCAN_AI_INVOICES';
	if v_count = 0 then 
		v_stat := 'CREATE OR REPLACE SYNONYM V_DOCUMENT_SCAN_AI_INVOICES FOR '||v_Schema||'.V_DOCUMENT_SCAN_AI_INVOICES';
		EXECUTE IMMEDIATE v_Stat;
	end if;
	SELECT COUNT(*) INTO v_count
	FROM USER_OBJECTS WHERE OBJECT_NAME = 'V_DOCUMENT_SCAN_AI_LINE_ITEM_INVOICE';
	if v_count = 0 then 
		v_stat := 'CREATE OR REPLACE SYNONYM V_DOCUMENT_SCAN_AI_LINE_ITEM_INVOICE FOR '||v_Schema||'.V_DOCUMENT_SCAN_AI_LINE_ITEM_INVOICE';
		EXECUTE IMMEDIATE v_Stat;
	end if;
	SELECT COUNT(*) INTO v_count
	FROM USER_OBJECTS WHERE OBJECT_NAME = 'V_DOCUMENT_SCAN_AI_DOC_FILES';
	if v_count = 0 then 
		v_stat := 'CREATE OR REPLACE SYNONYM V_DOCUMENT_SCAN_AI_DOC_FILES FOR '||v_Schema||'.V_DOCUMENT_SCAN_AI_DOC_FILES';
		EXECUTE IMMEDIATE v_Stat;
	end if;
end;
/
/*
CREATE OR REPLACE SYNONYM V_DOCUMENT_SCAN_AI_INVOICES FOR PLAYGROUND.V_DOCUMENT_SCAN_AI_INVOICES;
CREATE OR REPLACE SYNONYM V_DOCUMENT_SCAN_AI_LINE_ITEM_INVOICE FOR PLAYGROUND.V_DOCUMENT_SCAN_AI_LINE_ITEM_INVOICE;
CREATE OR REPLACE SYNONYM V_DOCUMENT_SCAN_AI_DOC_FILES FOR PLAYGROUND.V_DOCUMENT_SCAN_AI_DOC_FILES;

DROP SYNONYM V_DOCUMENT_SCAN_AI_INVOICES;
DROP SYNONYM V_DOCUMENT_SCAN_AI_LINE_ITEM_INVOICE;
DROP SYNONYM V_DOCUMENT_SCAN_AI_DOC_FILES;
*/

declare 
	v_count NUMBER;
	v_stat VARCHAR2(32767);
begin
	SELECT COUNT(*) INTO v_count
	FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'BELEGZAHLUNG_BT' AND COLUMN_NAME = 'SCAN_JOB_ID';
	if v_count = 0 then 
		v_stat := q'[
		ALTER TABLE BELEGZAHLUNG_BT ADD (
			scan_job_id 		NUMBER,
			scan_document_id	NUMBER
		)
		]';
		EXECUTE IMMEDIATE v_Stat;
	end if;
end;
/


CREATE OR REPLACE VIEW V_DOCUMENT_SCAN_AI_INVOICE_EXPORT (
	DOCUMENT_ID, JOB_ID, FILE_NAME, DOC_USTIDNR, 
	EINGANGSDATUM, FAELLIGKEITSDATUM, BELEGDATUM, BELEGJAHR, 
	ABRECHNUNGSJAHR, POSTEN_NR, FORDERUNG, GEAENDERTE_FORDERUNG, 
	PROJEKTEID, ADRESSENID, RECHNUNGSTEXT, 
	LFD_NR_KEY, EMPFAENGERID, AUFTRAGEGEBER, KOSTENSTELLENID, 
	WAEHRUNGFORDERUNG, WAEHRUNGZAHLBETRAG, PRUEFERID, PRUEFERID2, 
	UST_CODE, UST_CODE2, STATUSID, STELLERID, USTIDNR, FIBU_NR, RECHNUNGSSTELLER, 
	WERKVERTRAGID, KOSTENARTENID, KOSTENART, 
	BANKVERBINDUNGID, IBAN, SWIFT_BIC, KD_NR, VERWENDUNGSZWECK, RANK
) AS
WITH IMPORT_DOCS AS (
    SELECT I.Context_Id       PROJEKTEID, 
		I.Vendoraddress_Id	  ADRESSENID,
		COALESCE(I.Invoice_Receipt_Date, I.Invoice_Date+1, I.Creation_Date)  EINGANGSDATUM,
		I.Due_Date            FAELLIGKEITSDATUM, 
		I.Invoice_Date        BELEGDATUM, 
		TO_CHAR(NVL(I.Invoice_Date, I.Creation_Date), 'YYYY') BELEGJAHR,
		TO_CHAR(NVL(I.Invoice_Date, I.Creation_Date), 'YYYY') ABRECHNUNGSJAHR,
		SUBSTR(I.Invoice_Id, 1, 20)	POSTEN_NR, 
		NVL(I.Invoice_Total, 0.01) FORDERUNG,
		NVL(I.Invoice_Total, 0.01) GEAENDERTE_FORDERUNG,
		I.VENDOR_NAME			VENDOR_NAME,
		I.VENDOR_TAX_ID       	USTIDNR,
		I.FILE_NAME 			FILE_NAME,
		I.JOB_ID				JOB_ID,
		I.DOCUMENT_ID 			DOCUMENT_ID,
		AG.NAME             	AUFTRAGEGEBER,
		P.AUFTRAGGEBERID    	EMPFAENGERID, 
		P.KOSTENSTELLENID   	KOSTENSTELLENID, 
		NVL(P.Waehrung, V.WAEHRUNG_KUERZEL) WAEHRUNGFORDERUNG,  
		NVL(P.Waehrung, V.WAEHRUNG_KUERZEL)	WAEHRUNGZAHLBETRAG,  
		P.Hauptverantwortlicher1_Id PRUEFERID, 
		P.Hauptverantwortlicher2_Id PRUEFERID2,
        (select distinct FIRST_VALUE(S.CODE) OVER (PARTITION BY S.STEUERSATZ ORDER BY case when SUBSTR(S.CODE, 1, 2) = SUBSTR(I.BANK_IBAN, 1, 2) then 0 else 1 end, S.CODE
        					 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
			from STEUERSATZ S 
			join STEUERARTEN S2 on S2.ID = S.STEUERARTENID
			where S.STEUERSATZ = I.TAX_RATE 
			and S2.NUMMER IN (0, 7)
        ) UST_CODE,
		V.UMSATZSTEUERCODE 		UST_CODE2,
		I.TAX_RATE				TAX_RATE,
		REPLACE(I.BANK_IBAN, ' ') BANK_IBAN,
		I.BANK_BIC 				BANK_BIC,
		case when I.BANK_PURPOSE IS NOT NULL 
			then I.BANK_PURPOSE
			when I.Invoice_Id IS NOT NULL and I.CUSTOMER_ID IS NOT NULL
			then apex_string.format(p_message=>'Rg-Nr. %s, Kd-Nr. %s', p0=>I.Invoice_Id, p1=>I.CUSTOMER_ID, p_max_length=>20)
			when I.Invoice_Id IS NOT NULL 
			then apex_string.format(p_message=>'Rg-Nr. %s', p0=>I.Invoice_Id, p_max_length=>20)
		end BANK_PURPOSE,
		I.CUSTOMER_ID			CUSTOMER_ID
	FROM VORGABEN V 
    CROSS JOIN V_DOCUMENT_SCAN_AI_INVOICES I
    LEFT OUTER JOIN PROJEKTE P ON I.CONTEXT_ID = P.Id 
	LEFT OUTER JOIN AUFTRAGGEBER AG ON AG.ID = P.AUFTRAGGEBERID 
), IMPORT_DESCRIPTION AS (
	SELECT DOCUMENT_ID, JOB_ID, 
		SUBSTR(NVL(LISTAGG(Description, chr(13) ON OVERFLOW TRUNCATE)  
			WITHIN GROUP (ORDER BY page_number, line_number), file_name), 1, 180) RECHNUNGSTEXT
	from V_DOCUMENT_SCAN_AI_LINE_ITEM_INVOICE
	group by document_id, job_id, file_name
), PROJECT_ADRRESS AS (
	SELECT
		P.Id                PROJEKTEID, 
		A.MANDANTENID       STELLERID,
		M.USTIDNR           USTIDNR,
		M.KREDITORENID      FIBU_NR,
		M.NAME              RECHNUNGSSTELLER,
		W.ID                WERKVERTRAGID,
		W.KOSTENARTENID     KOSTENARTENID,
		K.BEZEICHNUNG       KOSTENART,
		A.ID                ADRESSENID
	FROM PROJEKTE P 
	JOIN WERKVERTRAG W ON W.PROJEKTEID = P.ID 
	LEFT OUTER JOIN MANDANTEN M ON W.AUFTRAGNEHMERID = M.ID 
	LEFT OUTER JOIN ADRESSEN A ON M.ID = A.MANDANTENID 
	LEFT OUTER JOIN KOSTENARTEN K ON W.KOSTENARTENID = K.ID 
	UNION ALL 
	SELECT
		P.Id                PROJEKTEID, 
		A.MANDANTENID       STELLERID,
		M.USTIDNR           USTIDNR,
		M.KREDITORENID      FIBU_NR,
		M.NAME              RECHNUNGSSTELLER,
		NULL                WERKVERTRAGID,
		NULL                KOSTENARTENID,
		NULL                KOSTENART,
		A.ID                ADRESSENID
	FROM PROJEKTE P  
	CROSS JOIN MANDANTEN M 
	LEFT OUTER JOIN ADRESSEN A ON M.ID = A.MANDANTENID 
	WHERE NOT EXISTS (
		SELECT 1 
		FROM WERKVERTRAG W 
		WHERE W.PROJEKTEID = P.ID 
		AND W.AUFTRAGNEHMERID = M.ID
	)
), MAIN_Q AS ( 
	SELECT D.DOCUMENT_ID,
		D.JOB_ID,
		D.FILE_NAME,
		D.USTIDNR DOC_USTIDNR,
		D.EINGANGSDATUM,
		D.FAELLIGKEITSDATUM,
		D.BELEGDATUM,
		D.BELEGJAHR,
		D.ABRECHNUNGSJAHR,
		D.POSTEN_NR,
		D.FORDERUNG, 
		D.GEAENDERTE_FORDERUNG,
		D.PROJEKTEID, 
		P.ADRESSENID,
		DS.RECHNUNGSTEXT, 
		('ER' || D.BELEGJAHR || '/' || D.EMPFAENGERID) LFD_NR_KEY,
		D.EMPFAENGERID,
		D.AUFTRAGEGEBER,
		D.KOSTENSTELLENID,
		D.WAEHRUNGFORDERUNG,
		D.WAEHRUNGZAHLBETRAG,
		D.PRUEFERID,
		D.PRUEFERID2,
		NVL(D.UST_CODE, D.UST_CODE2) UST_CODE,
		NVL(D.UST_CODE, D.UST_CODE2) UST_CODE2,
		10 STATUSID,
		P.STELLERID,
		NVL(P.USTIDNR, D.USTIDNR) USTIDNR,
		P.FIBU_NR,
		NVL(P.RECHNUNGSSTELLER, D.VENDOR_NAME) RECHNUNGSSTELLER,
		P.WERKVERTRAGID,
		P.KOSTENARTENID,
		P.KOSTENART,
		B.ID BANKVERBINDUNGID,
		NVL(B.IBAN, D.BANK_IBAN) IBAN, 
		NVL(B.SWIFT_BIC, D.BANK_BIC) SWIFT_BIC,
		NVL(B.KD_NR, D.CUSTOMER_ID)	KD_NR,
		D.BANK_PURPOSE VERWENDUNGSZWECK,
		DENSE_RANK() OVER (PARTITION BY D.DOCUMENT_ID, D.JOB_ID
			ORDER BY P.ADRESSENID, P.WERKVERTRAGID, B.ID) RANK
	FROM IMPORT_DOCS D 
	LEFT OUTER JOIN IMPORT_DESCRIPTION DS ON D.JOB_ID = DS.JOB_ID AND D.DOCUMENT_ID = DS.DOCUMENT_ID
	LEFT OUTER JOIN PROJECT_ADRRESS P ON P.ADRESSENID = D.ADRESSENID AND P.PROJEKTEID = D.PROJEKTEID 
	LEFT OUTER JOIN BANKVERBINDUNG B
		ON B.MANDANTENID = P.STELLERID
		AND (B.AUFTRAGGEBERID = D.EMPFAENGERID OR B.AUFTRAGGEBERID IS NULL)
		AND (B.IBAN = D.BANK_IBAN OR D.BANK_IBAN IS NULL)
		AND (B.SWIFT_BIC = D.BANK_BIC OR D.BANK_BIC IS NULL OR B.SWIFT_BIC IS NULL)
		AND (B.KD_NR = D.CUSTOMER_ID OR D.CUSTOMER_ID IS NULL OR B.KD_NR IS NULL)
)
SELECT * FROM MAIN_Q
WHERE RANK = 1;

CREATE OR REPLACE VIEW V_DOCUMENT_SCAN_AI_INVOICE_UPDATE
AS
select 
    apex_item.checkbox (30, B.ID, NULL, NULL, ':', 'f30_'||ROWNUM) as CHECKBOX,
	I.Context_Id     	PROJEKTEID, 
	P.AUFTRAGGEBERID	AUFTRAGGEBERID,
	I.Job_Id			JOB_ID,
	I.Document_Id 		DOCUMENT_ID,
	B.ID 				BELEGZAHLUNGID,
	B.BANKVERBINDUNGID	BANKVERBINDUNGID,
	I.Vendoraddress_Id	ADRESSENID,
	A.MANDANTENID		MANDANTENID,
	SUBSTR(I.Invoice_Id, 1, 20)	POSTEN_NR_NEU, 
	I.Invoice_Receipt_Date  EINGANG_NEU,
	I.Due_Date          FAELLIG_NEU, 
	I.Invoice_Paid_Date	ZAHLDATUM_NEU,
	I.Invoice_Date      BELEGDATUM_NEU, 
	I.Invoice_Total     FORDERUNG_NEU,
	COALESCE(I.Amount_Due, I.Invoice_Total) GEA_FORDERUNG_NEU,
	I.Vendor_Tax_Id     USTIDNR_NEU,
	I.Tax_Rate			STEUERSATZ_NEU,
	( select distinct FIRST_VALUE(S.CODE) OVER (PARTITION BY S.STEUERSATZ ORDER BY case when SUBSTR(S.CODE, 1, 2) = SUBSTR(I.BANK_IBAN, 1, 2) then 0 else 1 end, S.CODE
						 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
		from STEUERSATZ S 
		join STEUERARTEN S2 on S2.ID = S.STEUERARTENID
		where S.STEUERSATZ = I.TAX_RATE 
		and S2.NUMMER IN (0, 7)
	) UST_CODE_NEU,
	I.Vendor_Email		EMAIL_NEU,
	I.Vendor_Phone		TELEFON1_NEU,
	I.Vendor_Mobil		TELEFON2_NEU,
	I.Bank_BIC			SWIFT_BIC_NEU,
	REPLACE(I.Bank_IBAN, ' ') IBAN_NEU,
	I.Customer_Id		KUNDEN_NR_NEU,
	I.Bank_Purpose		VERWENDUNGSZWECK_NEU,
	B.POSTEN_NR, B.EINGANGSDATUM, B.FAELLIGKEITSDATUM, B.BELEGDATUM,
	B.FORDERUNG, B.GEAENDERTE_FORDERUNG, B.UST_CODE, B.VERWENDUNGSZWECK,
	B.SECKEY_KREDITOR,
	A.TELEFON1, A.TELEFON2, A.EMAIL,
	M.NAME, M.USTIDNR,
	BV.IBAN, BV.SWIFT_BIC, BV.KD_NR
from BELEGZAHLUNG B 
join V_DOCUMENT_SCAN_AI_INVOICES I on B.SCAN_DOCUMENT_ID = I.DOCUMENT_ID
join PROJEKTE P on P.ID = I.Context_Id 
left outer join MANDANTEN M on M.ID = B.STELLERID 
left outer join ADRESSEN A on A.ID = B.ADRESSENID 
left outer join BANKVERBINDUNG BV on BV.ID = B.BANKVERBINDUNGID
;


CREATE OR REPLACE VIEW V_DOCUMENT_SCAN_AI_CONTEXT AS
SELECT P.ID, P.NAME, AG.ADRESSENID
FROM USER_NAMESPACES WS
JOIN PROJEKTE_BT P ON P.WORKSPACE$_ID = WS.WORKSPACE$_ID and P.DELETED_MARK IS NULL
JOIN AUFTRAGGEBER_BT AG ON AG.WORKSPACE$_ID = WS.WORKSPACE$_ID AND AG.ID = P.AUFTRAGGEBERID and AG.DELETED_MARK IS NULL
WHERE WS.WORKSPACE_NAME = 'KITZBUEHEL_ALPS'
;

CREATE OR REPLACE VIEW V_DOCUMENT_SCAN_AI_CONTEXT_FIELDS (
	ID, Client_Name, Client_Email, Client_Tax_Id,
	Client_Phone, Client_IBAN, Client_SWIFT_BIC
) AS 
SELECT P.ID 
	, A.NAME Client_Name
	, A.EMAIL Client_Email
	, M.USTIDNR Client_Tax_Id
	, A.TELEFON1 Client_Phone
	, BV.IBAN Client_IBAN
	, BV.SWIFT_BIC Client_SWIFT_BIC
FROM USER_NAMESPACES WS
JOIN PROJEKTE_BT P ON P.WORKSPACE$_ID = WS.WORKSPACE$_ID and P.DELETED_MARK IS NULL
JOIN AUFTRAGGEBER_BT AG ON AG.WORKSPACE$_ID = WS.WORKSPACE$_ID AND AG.ID = P.AUFTRAGGEBERID and AG.DELETED_MARK IS NULL
JOIN WECO_TOWER1.MANDANTEN_BT M ON M.WORKSPACE$_ID = WS.WORKSPACE$_ID AND AG.MANDANTENID = M.ID and M.DELETED_MARK IS NULL
JOIN WECO_TOWER1.ADRESSEN_BT A ON A.WORKSPACE$_ID = WS.WORKSPACE$_ID AND AG.ADRESSENID = A.ID and A.DELETED_MARK IS NULL
LEFT OUTER JOIN WECO_TOWER1.BANKVERBINDUNG_BT BV ON BV.WORKSPACE$_ID = WS.WORKSPACE$_ID AND M.ID = BV.MANDANTENID and M.DELETED_MARK IS NULL
WHERE WS.WORKSPACE_NAME = 'KITZBUEHEL_ALPS'
;



CREATE OR REPLACE 
PROCEDURE Export_Invoice_Documents (
	p_Job_ID IN NUMBER
)
IS
	CURSOR c_adr IS
		with SCAN_AI_INVOICES as (
			select I.Context_Id, I.VENDORADDRESS_ID,
				I.VENDOR_TAX_ID, I.VENDOR_NAME, I.VENDOR_PHONE, I.VENDOR_MOBIL, I.VENDOR_EMAIL, I.CUSTOMER_ID,
				REPLACE(I.BANK_IBAN, ' ') BANK_IBAN,
				I.BANK_BIC
			from V_DOCUMENT_SCAN_AI_INVOICES I 
			where I.JOB_ID = p_Job_ID
		)
		select I.VENDOR_TAX_ID, P.AUFTRAGGEBERID,
			MAX(I.VENDOR_NAME) VENDOR_NAME, 
			MAX(I.VENDOR_PHONE) VENDOR_PHONE,
			MAX(I.VENDOR_MOBIL) VENDOR_MOBIL,
			MAX(I.VENDOR_EMAIL) VENDOR_EMAIL,
			MAX(I.CUSTOMER_ID) CUSTOMER_ID,
			MAX(I.BANK_BIC) BANK_BIC,
			I.BANK_IBAN BANK_IBAN,
			SUBSTR(I.BANK_IBAN, 5, L.BLZ_LENGTH) AS BLZ, 
			RPAD(SUBSTR(I.BANK_IBAN, 5 + L.BLZ_LENGTH + 1, L.KONTONR_LENGTH), L.KONTONR_LENGTH, '0') KONTONR, 
			B.ID BANKENID,
			L.LAND_ID LAENDERID,
			L2.LAND_ID LAENDERID2
		from SCAN_AI_INVOICES I
		join PROJEKTE P ON I.Context_Id = P.Id
		left outer join LAENDER L ON SUBSTR(I.BANK_IBAN, 1, 2) = L.KURZNAME2
		left outer join LAENDER L2 ON SUBSTR(I.VENDOR_TAX_ID, 1, 2) = L2.KURZNAME2
		left outer join BANKEN B on B.LAENDERID = L.LAND_ID
			and B.BLZ = SUBSTR(I.BANK_IBAN, 5, L.BLZ_LENGTH)
			and B.MERKMAL = '1'
		where I.VENDORADDRESS_ID IS NULL 
		and I.VENDOR_NAME IS NOT NULL
		and I.VENDOR_TAX_ID IS NOT NULL
		group by I.VENDOR_TAX_ID, P.AUFTRAGGEBERID, I.BANK_IBAN, L.BLZ_LENGTH, L.KONTONR_LENGTH, B.ID, L.LAND_ID, L2.LAND_ID;
	l_adr 				c_adr%ROWTYPE;  
	
	CURSOR c_doc IS
		SELECT * FROM V_DOCUMENT_SCAN_AI_INVOICE_EXPORT
		WHERE JOB_ID = p_Job_ID;
	l_doc				c_doc%ROWTYPE;   
    
    CURSOR c_file(v_document_id NUMBER) IS 
        SELECT * FROM V_DOCUMENT_SCAN_AI_DOC_FILES
        WHERE document_id = v_document_id;
	l_file				c_file%ROWTYPE;   
        
	l_MANDANTENID 		MANDANTEN.ID%TYPE;
	l_ADRESSENID 		ADRESSEN.ID%TYPE;
	l_Belegzahlung_Id 	BELEGZAHLUNG_BT.ID%TYPE;
	l_lfd_Nr			BELEGZAHLUNG_BT.LFD_NR%TYPE;
	l_blob				BLOB;
	l_doc_rowid 		ROWID;
BEGIN
	set_custom_ctx.Set_Current_Workspace (
   		p_Workspace_Name => 'KITZBUEHEL_ALPS',
   		p_Schema_Name => 'WECO_TOWER1'
   	);
   	set_custom_ctx.Set_Current_User (
		p_User_Name	=> V('APP_USER'),
   		p_Schema_Name => 'WECO_TOWER1'
	);
	OPEN	c_adr;
	loop 
		FETCH c_adr INTO l_adr;
		EXIT WHEN c_adr%NOTFOUND;
		insert into MANDANTEN (KREDITORENID, DEBITORENID, NAME, USTIDNR, LAENDERID)
		values (
			weco_fibu.NewFIBUID(l_adr.VENDOR_NAME, 1),
			weco_fibu.NewFIBUID(l_adr.VENDOR_NAME, 0),
			l_adr.VENDOR_NAME, 
			l_adr.VENDOR_TAX_ID, l_adr.LAENDERID2
		) returning ID into l_MANDANTENID;
		
		insert into ADRESSEN (MANDANTENID, NAME, FIRMA1, TELEFON1, TELEFON2, EMAIL)
		values (l_MANDANTENID, l_adr.VENDOR_NAME, l_adr.VENDOR_NAME,
			l_adr.VENDOR_PHONE, l_adr.VENDOR_MOBIL, l_adr.VENDOR_EMAIL
		) returning ID into l_ADRESSENID;
		
		if l_adr.BANK_IBAN IS NOT NULL then 
			insert into BANKVERBINDUNG (MANDANTENID, AUFTRAGGEBERID, 
				IBAN, BANKKONTO, BANKENID, LAENDERID, 
				SWIFT_BIC, KONTOINHABER, KD_NR, WAEHRUNGBETRAG)
			values (l_MANDANTENID, l_adr.AUFTRAGGEBERID, 
				l_adr.BANK_IBAN, l_adr.KONTONR, l_adr.BANKENID, l_adr.LAENDERID,
				l_adr.BANK_BIC, l_adr.VENDOR_NAME, l_adr.CUSTOMER_ID, 'EUR');
		end if;
		
		update DOCUMENT_SCAN_AI_DOCS D 
		set VENDORADDRESS_ID = l_ADRESSENID
		where VENDORADDRESS_ID IS NULL 
		and exists (
			select 1 
			from DOCUMENT_SCAN_AI_FIELDS F
			where F.DOCUMENT_ID = D.DOCUMENT_ID
			and F.FIELD_LABEL = 'VendorTaxId'
			and F.FIELD_TEXT = l_adr.VENDOR_TAX_ID
		);
	end loop;	
	CLOSE c_adr;
	
	OPEN	c_doc;
	loop 
		FETCH c_doc INTO l_doc;
		EXIT WHEN c_doc%NOTFOUND;
		l_lfd_Nr := weco_pack.Get_Lfd_Nr(l_doc.LFD_NR_KEY);
		INSERT INTO BELEGZAHLUNG (
            EINGANGSDATUM, FAELLIGKEITSDATUM, BELEGDATUM, BELEGJAHR
			, ABRECHNUNGSJAHR, POSTEN_NR, FORDERUNG, GEAENDERTE_FORDERUNG
			, ADRESSENID, RECHNUNGSTEXT
			, LFD_NR, EMPFAENGERID, KOSTENSTELLENID
			, WAEHRUNGFORDERUNG, WAEHRUNGZAHLBETRAG, PRUEFERID, PRUEFERID2
			, UST_CODE, UST_CODE2, STATUSID, STELLERID
			, FIBU_NR, RECHNUNGSSTELLER, VERWENDUNGSZWECK
			, WERKVERTRAGID, BANKVERBINDUNGID
			, SCAN_JOB_ID, SCAN_DOCUMENT_ID
		) VALUES (
			l_doc.EINGANGSDATUM, l_doc.FAELLIGKEITSDATUM, l_doc.BELEGDATUM, l_doc.BELEGJAHR
			, l_doc.ABRECHNUNGSJAHR, l_doc.POSTEN_NR, l_doc.FORDERUNG, l_doc.GEAENDERTE_FORDERUNG
			, l_doc.ADRESSENID, l_doc.RECHNUNGSTEXT
			, l_lfd_Nr, l_doc.EMPFAENGERID, l_doc.KOSTENSTELLENID
			, l_doc.WAEHRUNGFORDERUNG, l_doc.WAEHRUNGZAHLBETRAG, l_doc.PRUEFERID, l_doc.PRUEFERID2
			, l_doc.UST_CODE, l_doc.UST_CODE2, l_doc.STATUSID, l_doc.STELLERID
			, l_doc.FIBU_NR, l_doc.RECHNUNGSSTELLER, l_doc.VERWENDUNGSZWECK
			, l_doc.WERKVERTRAGID, l_doc.BANKVERBINDUNGID
			, l_doc.JOB_ID, l_doc.DOCUMENT_ID
		) RETURNING (ID) INTO l_Belegzahlung_Id;
		
        OPEN c_file(l_doc.document_id);
        FETCH c_file INTO l_file;
        if c_file%FOUND then 
			INSERT INTO Belegzahlung_Dokument (
				Datum, Filename, Belegzahlungid, Bild, 
				bild_thumbnail, Mime_Typ, Index_Format
			) VALUES (
				l_file.creation_date, l_file.file_name, l_Belegzahlung_Id, l_file.file_content,
				l_file.thumbnail_png, l_file.mime_type, l_file.index_format
			);        
        end if;
        CLOSE c_file;		
	end loop;
	CLOSE c_doc;
END Export_Invoice_Documents;
/
